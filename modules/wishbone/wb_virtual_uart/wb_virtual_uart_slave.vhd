---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Virtual UART
---------------------------------------------------------------------------------------
-- File           : wb_virtual_uart_slave.vhd
-- Author         : auto-generated by wbgen2 from wb_virtual_uart.wb
-- Created        : Sun Apr 10 20:25:49 2011
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wb_virtual_uart.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wbgen2_pkg.all;

entity wb_virtual_uart_slave is
  port (
    rst_n_i                                  : in     std_logic;
    wb_clk_i                                 : in     std_logic;
    wb_addr_i                                : in     std_logic_vector(2 downto 0);
    wb_data_i                                : in     std_logic_vector(31 downto 0);
    wb_data_o                                : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
-- Port for BIT field: 'TX busy' in reg: 'Status Register'
    uart_sr_tx_busy_i                        : in     std_logic;
-- Port for BIT field: 'RX ready' in reg: 'Status Register'
    uart_sr_rx_rdy_i                         : in     std_logic;
-- Port for std_logic_vector field: 'Baudrate divider setting' in reg: 'Baudrate control register'
    uart_bcr_o                               : out    std_logic_vector(31 downto 0);
-- Port for std_logic_vector field: 'Transmit data' in reg: 'Transmit data regsiter'
    uart_tdr_tx_data_o                       : out    std_logic_vector(7 downto 0);
    uart_tdr_tx_data_i                       : in     std_logic_vector(7 downto 0);
    uart_tdr_tx_data_load_o                  : out    std_logic;
-- Port for std_logic_vector field: 'Received data' in reg: 'Receive data regsiter'
    uart_rdr_rx_data_i                       : in     std_logic_vector(7 downto 0);
    rdr_rack_o                               : out    std_logic;
-- FIFO write request
    uart_debug_wr_req_i                      : in     std_logic;
-- FIFO full flag
    uart_debug_wr_full_o                     : out    std_logic;
-- FIFO empty flag
    uart_debug_wr_empty_o                    : out    std_logic;
-- FIFO number of used words
    uart_debug_wr_usedw_o                    : out    std_logic_vector(10 downto 0);
    uart_debug_tx_i                          : in     std_logic_vector(7 downto 0);
    uart_debug_dupa_i                        : in     std_logic_vector(31 downto 0)
  );
end wb_virtual_uart_slave;

architecture syn of wb_virtual_uart_slave is

signal uart_bcr_int                             : std_logic_vector(31 downto 0);
signal uart_debug_in_int                        : std_logic_vector(39 downto 0);
signal uart_debug_out_int                       : std_logic_vector(39 downto 0);
signal uart_debug_rdreq_int                     : std_logic      ;
signal uart_debug_rdreq_int_d0                  : std_logic      ;
signal uart_debug_full_int                      : std_logic      ;
signal uart_debug_empty_int                     : std_logic      ;
signal uart_debug_usedw_int                     : std_logic_vector(10 downto 0);
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(2 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal bus_clock_int                            : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_data_i;
  bwsel_reg <= wb_sel_i;
  bus_clock_int <= wb_clk_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      uart_bcr_int <= "00000000000000000000000000000000";
      uart_tdr_tx_data_load_o <= '0';
      rdr_rack_o <= '0';
      uart_debug_rdreq_int <= '0';
    elsif rising_edge(bus_clock_int) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          uart_tdr_tx_data_load_o <= '0';
          rdr_rack_o <= '0';
          ack_in_progress <= '0';
        else
          uart_tdr_tx_data_load_o <= '0';
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(2 downto 0) is
          when "000" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(0) <= uart_sr_tx_busy_i;
              rddata_reg(1) <= uart_sr_rx_rdy_i;
              rddata_reg(2) <= 'X';
              rddata_reg(3) <= 'X';
              rddata_reg(4) <= 'X';
              rddata_reg(5) <= 'X';
              rddata_reg(6) <= 'X';
              rddata_reg(7) <= 'X';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "001" => 
            if (wb_we_i = '1') then
              uart_bcr_int <= wrdata_reg(31 downto 0);
            else
              rddata_reg(31 downto 0) <= uart_bcr_int;
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "010" => 
            if (wb_we_i = '1') then
              uart_tdr_tx_data_load_o <= '1';
            else
              rddata_reg(7 downto 0) <= uart_tdr_tx_data_i;
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "011" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(7 downto 0) <= uart_rdr_rx_data_i;
              rdr_rack_o <= '1';
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "100" => 
            if (wb_we_i = '1') then
            else
              if (uart_debug_rdreq_int_d0 = '0') then
                uart_debug_rdreq_int <= not uart_debug_rdreq_int;
              else
                rddata_reg(7 downto 0) <= uart_debug_out_int(7 downto 0);
                ack_in_progress <= '1';
                ack_sreg(0) <= '1';
              end if;
              rddata_reg(8) <= 'X';
              rddata_reg(9) <= 'X';
              rddata_reg(10) <= 'X';
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(16) <= 'X';
              rddata_reg(17) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
          when "101" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(31 downto 0) <= uart_debug_out_int(39 downto 8);
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when "110" => 
            if (wb_we_i = '1') then
            else
              rddata_reg(16) <= uart_debug_full_int;
              rddata_reg(17) <= uart_debug_empty_int;
              rddata_reg(10 downto 0) <= uart_debug_usedw_int;
              rddata_reg(11) <= 'X';
              rddata_reg(12) <= 'X';
              rddata_reg(13) <= 'X';
              rddata_reg(14) <= 'X';
              rddata_reg(15) <= 'X';
              rddata_reg(18) <= 'X';
              rddata_reg(19) <= 'X';
              rddata_reg(20) <= 'X';
              rddata_reg(21) <= 'X';
              rddata_reg(22) <= 'X';
              rddata_reg(23) <= 'X';
              rddata_reg(24) <= 'X';
              rddata_reg(25) <= 'X';
              rddata_reg(26) <= 'X';
              rddata_reg(27) <= 'X';
              rddata_reg(28) <= 'X';
              rddata_reg(29) <= 'X';
              rddata_reg(30) <= 'X';
              rddata_reg(31) <= 'X';
            end if;
            ack_sreg(0) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_data_o <= rddata_reg;
-- TX busy
-- RX ready
-- Baudrate divider setting
  uart_bcr_o <= uart_bcr_int;
-- Transmit data
  uart_tdr_tx_data_o <= wrdata_reg(7 downto 0);
-- Received data
-- extra code for reg/fifo/mem: UART TX FIFO
  uart_debug_in_int(7 downto 0) <= uart_debug_tx_i;
  uart_debug_in_int(39 downto 8) <= uart_debug_dupa_i;
  uart_debug_INST : wbgen2_fifo_sync
    generic map (
      g_size               => 2048,
      g_width              => 40,
      g_usedw_size         => 11
    )
    port map (
      wr_req_i             => uart_debug_wr_req_i,
      wr_full_o            => uart_debug_wr_full_o,
      wr_empty_o           => uart_debug_wr_empty_o,
      wr_usedw_o           => uart_debug_wr_usedw_o,
      rd_full_o            => uart_debug_full_int,
      rd_empty_o           => uart_debug_empty_int,
      rd_usedw_o           => uart_debug_usedw_int,
      rd_req_i             => uart_debug_rdreq_int,
      clk_i                => bus_clock_int,
      wr_data_i            => uart_debug_in_int,
      rd_data_o            => uart_debug_out_int
    );
  
-- extra code for reg/fifo/mem: FIFO 'UART TX FIFO' data output register 0
  process (bus_clock_int, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      uart_debug_rdreq_int_d0 <= '0';
    elsif rising_edge(bus_clock_int) then
      uart_debug_rdreq_int_d0 <= uart_debug_rdreq_int;
    end if;
  end process;
  
  
-- extra code for reg/fifo/mem: FIFO 'UART TX FIFO' data output register 1
  rwaddr_reg <= wb_addr_i;
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
